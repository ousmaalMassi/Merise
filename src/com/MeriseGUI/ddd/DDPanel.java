/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.MeriseGUI.ddd;

import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;

/**
 * @author rpc
 */
public class DDPanel extends JPanel implements KeyListener {

    private static final String SUPP_TEXT = "supprimer";
    private JTable ddTable;
    private JComboBox<Boolean> combo;
    private static DDModel ddModel;
    private Object[][] data;
    private GroupLayout layout;


    /**
     * Creates new form dddTable
     *
     * @param x
     * @param panelName
     */
    public DDPanel(Object x, String panelName) {
        initComponents();
        addKeyListener(this);
        showExemple();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        data = new Object[][]{createEmptyDataRow()};
        ArrayList<ArrayList> dataDictionnary = new ArrayList<>();
        String[] comboData = new String[]{"BIGINT_AUTO_INCREMENT", "BIGINT", "INT", "VARCHAR", "TEXT", "DATE"};
        combo = new JComboBox(comboData);
        String[] title = new String[]{"Nom", "Identifiant", "Type", "Taille", "Entité", "utilisé", "suppression"};
        ddModel = new DDModel(data, title);
        layout = new GroupLayout(this);


        ddTable = new JTable(ddModel);
        ddTable.getColumn("Type").setCellEditor(new DefaultCellEditor(combo));
        ddTable.getColumn("suppression").setCellRenderer(new ButtonRenderer());
        ddTable.setRowHeight(35);

        JButton addRowBtn = new JButton();
        addRowBtn.setText("Ajouter un attribue");
        addRowBtn.setFont(new Font("Tahoma", Font.BOLD, 15));
        addRowBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addNewRow(null);
            }
        });

        JScrollPane jScrollPane1 = new JScrollPane();
        jScrollPane1.setViewportView(ddTable);
        JPanel jPanel = new JPanel(new BorderLayout());
        jPanel.add(jScrollPane1, BorderLayout.CENTER);
        jPanel.add(addRowBtn, BorderLayout.SOUTH);

        ddModel.setValueAt(combo.getItemAt(0), ddTable.getRowCount() - 1, 2);

        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel, GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel, GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>                        

    private Object[] createEmptyDataRow() {
        return new Object[]{"", "", "", "0", "", false, SUPP_TEXT};
    }


    private void addNewRow(Object[] dataRow) {
        if (dataRow != null) {
            String attribName = (String) dataRow[0];
            dataRow[1] = attribName.replaceAll(" ", "_").toUpperCase();
            ddModel.addRow(dataRow);
        } else
            ddModel.addRow(createEmptyDataRow());
        ddModel.setValueAt(combo.getItemAt(0), ddTable.getRowCount() - 1, 2);
    }


    private void showExemple() {
        ddModel.removeRow(0);
        Object[][] dataExemple = new Object[][]{
                {"id client", "", "", "11", "", false, SUPP_TEXT},
                {"nom", "", "", "50", "", false, SUPP_TEXT},
                {"prénom", "", "", "50", "", false, SUPP_TEXT},
                {"adresse", "", "", "255", "", false, SUPP_TEXT},
                {"id_article", "", "", "11", "", false, SUPP_TEXT},
                {"prix_achat", "", "", "10", "", false, SUPP_TEXT},
                {"prix_vente", "", "", "10", "", false, SUPP_TEXT},
                {"designation", "", "", "", "", false, SUPP_TEXT},
                {"quantity", "", "", "2", "", false, SUPP_TEXT},
        };

        for (Object[] dataRow : dataExemple) {
            addNewRow(dataRow);
        }
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
        /*if (e.getKeyCode() == KeyEvent.VK_ENTER) {
            if (true) {
                ddModel.addRow(new Object[]{"", "", "", "", "", false, SUPP_TEXT});
                ddModel.setValueAt(combo.getItemAt(0), ddTable.getRowCount()-1, 2);    
            }
            //PrintDataTable();
        }*/
    }

    @Override
    public void keyReleased(KeyEvent e) {
    }

    public class ButtonRenderer extends JButton implements TableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(
                JTable table, Object value, boolean isSelected,
                boolean isFocus,
                int row, int col
        ) {
            //On écrit dans le bouton avec la valeur de la cellule
            setText((value != null) ? value.toString() : "");
            //on retourne notre bouton
            return this;
        }
    }

    class DDModel extends AbstractTableModel {
        private Object[][] data;
        private String[] title;

        public DDModel(Object[][] data, String[] title) {
            this.data = data;
            this.title = title;
        }

        /**
         * Retourne le titre de la colonne à l'indice spécifé
         */
        @Override
        public String getColumnName(int col) {
            return this.title[col];
        }

        /**
         * Retourne le nombre de colonnes
         */
        @Override
        public int getColumnCount() {
            return this.title.length;
        }

        /**
         * Retourne le nombre de lignes
         */
        @Override
        public int getRowCount() {
            return this.data.length;
        }

        /**
         * Retourne la valeur à l'emplacement spécifié
         */
        @Override
        public Object getValueAt(int row, int col) {
            return this.data[row][col];
        }

        /**
         * Défini la valeur à l'emplacement spécifié
         */
        @Override
        public void setValueAt(Object value, int row, int col) {
            //On interdit la modification sur certaine colonne !
            //if(!this.getColumnName(col).equals("Age") && !this.getColumnName(col).equals("Suppression"))
            this.data[row][col] = value;
        }

        /**
         * Retourne la classe de la donnée de la colonne
         *
         * @param col
         */
        @Override
        public Class getColumnClass(int col) {
            //On retourne le type de la cellule à la colonne demandée
            //On se moque de la ligne puisque les données sur chaque ligne sont les mêmes
            //On choisit donc la première ligne
            return this.data[0][col].getClass();
        }

        public void removeRow(int position) {
            int indice = 0, indice2 = 0, nbRow = this.getRowCount() - 1, nbCol = this.getColumnCount();
            Object temp[][] = new Object[nbRow][nbCol];
            for (Object[] value : this.data) {
                if (indice != position) {
                    temp[indice2++] = value;
                }
                System.out.println("Indice = " + indice);
                indice++;
            }
            data = temp;
            temp = null;
            //Cette méthode permet d'avertir le tableau que les données ont été modifiées
            //Ce qui permet une mise à jours complète du tableau
            this.fireTableDataChanged();
        }

        /**
         * Permet d'ajouter une ligne dans le tableau
         *
         * @param data
         */
        public void addRow(Object[] data) {
            int indice = 0, nbRow = this.getRowCount(), nbCol = this.getColumnCount();
            Object temp[][] = this.data;
            this.data = new Object[nbRow + 1][nbCol];
            for (Object[] value : temp)
                this.data[indice++] = value;
            this.data[indice] = data;
            temp = null;
            //Cette méthode permet d'avertir le tableau que les données ont été modifiées
            //Ce qui permet une mise à jours complète du tableau
            this.fireTableDataChanged();
        }

        @Override
        public boolean isCellEditable(int row, int col) {
            return true;
        }

        public Object[][] getTableData() {
            int nRow = ddModel.getRowCount() - 1;
            int nCol = ddModel.getColumnCount();
            Object[][] tableData = new Object[nRow][nCol];

            for (int i = 0; i < nRow; i++) {
                for (int j = 0; j < nCol; j++) {
                    tableData[i][j] = ddModel.getValueAt(i, j).toString();
                }
            }
            return tableData;
        }
    }

    void PrintDataTable() {
        Object[][] tableData = ddModel.getTableData();
        for (Object[] tableRow : tableData) {
            for (Object tableColumn : tableRow) {
                System.out.println(tableColumn);
            }
        }
    }

    public static ArrayList getAttributeList() {
        int nRow = ddModel.getRowCount() - 1;
        ArrayList<String> attrList = new ArrayList<>();
        for (int i = 0; i < nRow; i++) {
            attrList.add(ddModel.getValueAt(i, 0).toString());
        }
        attrList.removeIf(item -> item.equals(""));
        return attrList;
    }

    public static Object[][] getAttributes() {
        int nRow = ddModel.getRowCount() - 1;
        Object[][] tableData = new Object[nRow][2];
        for (int i = 0; i < nRow; i++) {
            tableData[i][0] = ddModel.getValueAt(i, 0).toString();
            tableData[i][1] = ddModel.getValueAt(i, 2).toString();
        }
        return tableData;
    }
}


//ddTable.setFocusable(false);
        /*ddTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                JTable target = (JTable)e.getSource();
                int row = target.getSelectedRow();
                int column = target.getSelectedColumn();
            }
        });
        ddTable.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                JTable target = (JTable)e.getSource();
                int row = target.getSelectedRow();
                int column = target.getSelectedColumn();
                
                String attribName = ddModel.getValueAt(ddModel.getRowCount()-1, 0).toString();
                //if (attribName != "") {
                    ddModel.setValueAt(attribName.replaceAll(" ", "_").toUpperCase(), ddModel.getRowCount()-1, 1);
                    ddModel.addRow(new Object[]{"", "", "", "", "", false, SUPP_TEXT});
                    ddModel.setValueAt(combo.getItemAt(0), ddTable.getRowCount()-1, 2);
                    //System.out.println(ddModel.getValueAt(ddModel.getRowCount()-1, 0).toString());
                //}
            }
        });*/
        